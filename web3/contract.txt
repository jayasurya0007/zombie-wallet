module zombiewallet::zombie {
    use sui::coin::{Coin, from_balance, into_balance};
    use sui::balance::{Balance, split, join, value, zero};
    use sui::object::{new, delete, ID};
    use sui::transfer::{share_object, public_transfer};
    use sui::tx_context::{sender, TxContext};
    use sui::sui::SUI;
    use sui::table::{Table, contains, add, borrow, remove, destroy_empty};

    const EWalletExists: u64 = 0;
    const EInvalidAllocations: u64 = 3;
    const EInvalidOwnership: u64 = 4;
    const EInvalidWithdrawAmount: u64 = 6;
    const ENotBeneficiary: u64 = 8;
    const EInvalidBeneficiary: u64 = 11;
    const ECapabilityMismatch: u64 = 12;

    public struct BeneficiaryData has store, drop {
        allocation: u64,
    }

    public struct ZombieWallet has key, store {
        id: sui::object::UID,
        owner: address,
        beneficiaries: Table<address, BeneficiaryData>,
        beneficiary_addrs: vector<address>,
        coin: Balance<SUI>
    }

    public struct ClaimCapability has key, store {
        id: sui::object::UID,
        wallet_id: ID,
        beneficiary: address
    }

    /// Create shared wallet
    public entry fun create_wallet(ctx: &mut TxContext) {
        let wallet = ZombieWallet {
            id: new(ctx),
            owner: sender(ctx),
            beneficiaries: sui::table::new<address, BeneficiaryData>(ctx),
            beneficiary_addrs: vector::empty<address>(),
            coin: zero()
        };
        share_object(wallet); // Critical shared object
    }

    /// Add beneficiary with capability
    public entry fun add_beneficiary(
        wallet: &mut ZombieWallet,
        beneficiary: address,
        allocation: u64,
        deposit: Coin<SUI>,
        ctx: &mut TxContext
    ) {
        assert!(wallet.owner == sender(ctx), EInvalidOwnership);
        assert!(allocation > 0, EInvalidAllocations);

        // Check existing beneficiary
        let addr_vector = &wallet.beneficiary_addrs;
        let len = vector::length(addr_vector);
        let mut i = 0;
        while (i < len) {
            let addr = *vector::borrow(addr_vector, i);
            assert!(addr != beneficiary, EWalletExists);
            i = i + 1;
        };

        // Create & send capability
        let capability = ClaimCapability {
            id: new(ctx),
            wallet_id: sui::object::id(wallet),
            beneficiary
        };
        public_transfer(capability, beneficiary);

        join(&mut wallet.coin, into_balance(deposit));
        add(&mut wallet.beneficiaries, beneficiary, BeneficiaryData { allocation });
        vector::push_back(&mut wallet.beneficiary_addrs, beneficiary);
    }

    /// Beneficiary claim entry point
    public entry fun claim_allocation(
        wallet: &mut ZombieWallet,  // Shared object
        cap: ClaimCapability,       // Owned capability
        ctx: &mut TxContext
    ) {
        // Validate capability
        assert!(cap.wallet_id == sui::object::id(wallet), ECapabilityMismatch);
        assert!(cap.beneficiary == sender(ctx), EInvalidBeneficiary);
        
        // Process claim
        assert!(contains(&wallet.beneficiaries, cap.beneficiary), ENotBeneficiary);
        let data = remove(&mut wallet.beneficiaries, cap.beneficiary);
        assert!(data.allocation <= value(&wallet.coin), EInvalidWithdrawAmount);

        let coin = from_balance(split(&mut wallet.coin, data.allocation), ctx);
        public_transfer(coin, cap.beneficiary);

        // Cleanup
        let addr_vector = &mut wallet.beneficiary_addrs;
        let len = vector::length(addr_vector);
        let mut i = 0;
        while (i < len) {
            if (*vector::borrow(addr_vector, i) == cap.beneficiary) {
                vector::swap_remove(addr_vector, i);
                break;
            };
            i = i + 1;
        };
        // Properly move out the UID from cap for deletion
        let ClaimCapability { id, wallet_id: _, beneficiary: _ } = cap;
        delete(id);
    }

    public entry fun withdraw(
        wallet: &mut ZombieWallet,
        beneficiary: address,
        ctx: &mut TxContext
    ) {
        // Validate ownership and beneficiary existence
        assert!(sender(ctx) == wallet.owner, EInvalidOwnership);
        assert!(contains(&wallet.beneficiaries, beneficiary), ENotBeneficiary);

        // Remove beneficiary data to get allocation amount
        let data = remove(&mut wallet.beneficiaries, beneficiary);
        let allocation_amount = data.allocation;

        // Remove from beneficiary address list
        let addr_vector = &mut wallet.beneficiary_addrs;
        let len = vector::length(addr_vector);
        let mut i = 0;
        while (i < len) {
            if (*vector::borrow(addr_vector, i) == beneficiary) {
                vector::swap_remove(addr_vector, i);
                break;
            };
            i = i + 1;
        };

        // Verify and transfer funds
        assert!(allocation_amount <= value(&wallet.coin), EInvalidWithdrawAmount);
        let coin = from_balance(split(&mut wallet.coin, allocation_amount), ctx);
        public_transfer(coin, wallet.owner);
    }

    public entry fun execute_transfer(
        wallet: ZombieWallet,
        ctx: &mut TxContext
    ) {
        let ZombieWallet {
            id,
            owner: _,
            mut beneficiaries,
            beneficiary_addrs,
            coin
        } = wallet;

        let len = vector::length(&beneficiary_addrs);
        assert!(len > 0, EInvalidAllocations);

        // Validate total allocations
        let mut total_allocations = 0;
        let mut i = 0;
        while (i < len) {
            let addr = *vector::borrow(&beneficiary_addrs, i);
            let data = borrow(&beneficiaries, addr);
            total_allocations = total_allocations + data.allocation;
            i = i + 1;
        };
        assert!(total_allocations <= value(&coin), EInvalidAllocations);

        // Distribute funds
        let mut coin_mut = coin;
        let mut i = 0;
        while (i < len - 1) {
            let addr = *vector::borrow(&beneficiary_addrs, i);
            let data = remove(&mut beneficiaries, addr);
            let split_balance = split(&mut coin_mut, data.allocation);
            let coin_portion = from_balance(split_balance, ctx);
            public_transfer(coin_portion, addr);
            i = i + 1;
        };

        // Final beneficiary gets remaining balance
        let addr = *vector::borrow(&beneficiary_addrs, len - 1);
        let last_coin = from_balance(coin_mut, ctx);
        public_transfer(last_coin, addr);
        remove(&mut beneficiaries, addr);

        destroy_empty(beneficiaries);
        delete(id);
    }
    
    // View functions
    public fun get_beneficiary_addrs(wallet: &ZombieWallet): &vector<address> {
        &wallet.beneficiary_addrs
    }

    public fun get_beneficiary_data(
        wallet: &ZombieWallet,
        addr: address
    ): &BeneficiaryData {
        borrow(&wallet.beneficiaries, addr)
    }
}
